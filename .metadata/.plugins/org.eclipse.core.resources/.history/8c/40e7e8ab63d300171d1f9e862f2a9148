package utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

import javax.servlet.ServletRequest;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;


import componenti.Rilevazione;
import componenti.Sensore;
import componenti.UserAccount;
import exceptions.NullException;
import exceptions.ZeroException;

public class MyUtils {

	public static final String ATT_NAME_CONNECTION = "ATTRIBUTE_FOR_CONNECTION";
	private static final String ATT_NAME_USER_NAME = "ATTRIBUTE_FOR_STORE_USER_NAME_IN_COOKIE";
	public static SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
	
	//Store Connection in request attribute.
	//Information stored only exist during requests
	public static void storeConnection(ServletRequest request, Connection conn) {
		request.setAttribute(ATT_NAME_CONNECTION, conn);
	}
	
	//Get connection object has been stored in attribute of request
	public static Connection getStoredConnection(ServletRequest request) {
		
		Connection conn = (Connection) request.getAttribute(ATT_NAME_CONNECTION);
		return conn;
	}
	
	// Store user info in Session.
	public static void storeLoginedUser(HttpSession session, UserAccount loginedUser) {
	// On the JSP can access via ${loginedUser}
		session.setAttribute("loginedUser", loginedUser);
	}
	
	// Get the user information stored in the session.
	public static UserAccount getLoginedUser(HttpSession session) {
		
		UserAccount loginedUser = (UserAccount) session.getAttribute("loginedUser");
		return loginedUser;	
	}
	
	//Store info in Cookie
	public static void storeUserCookie(HttpServletResponse response, UserAccount user) {
		
		System.out.println("Store user coockie");
		Cookie cookieUserName = new Cookie(ATT_NAME_USER_NAME, user.getUserName());	
		
		//1 day (converted to seconds)
		cookieUserName.setMaxAge(24*60*60);
		response.addCookie(cookieUserName);
	}
	
	public static String getUserNameInCookie(HttpServletRequest request) {
		
		Cookie[] cookies = request.getCookies();
		
		if(cookies != null) {
			for(Cookie cookie : cookies) {
				if(ATT_NAME_USER_NAME.equals(cookie.getName())) {
					return cookie.getValue();
				}
			}
		}
		return null;
	}
	
	//Delete cookie
	public static void deleteUserCookie(HttpServletResponse response) {
		
		Cookie cookieUserName = new Cookie(ATT_NAME_USER_NAME, null);
		
		//0 seconds (this cookie expire immediately)
		cookieUserName.setMaxAge(0);
		
		response.addCookie(cookieUserName);
	}
	
	public static void obtainRelev(File file, Connection conn) throws FileNotFoundException, NullException, SQLException, ZeroException {
		
		Scanner inputStream = new Scanner(file);
		
		String riga = null;
		
		while(inputStream.hasNextLine()) {
			
			riga = inputStream.nextLine();
			
			String[] array = riga.split(",");
			
			Rilevazione rilevazione = new Rilevazione();
			
			//Controllo la prima stringa
			if(Character.isLowerCase(array[0].charAt(0))) {
				
				rilevazione.setDescrizione(array[0]);
				
			} else if(Character.isUpperCase(array[0].charAt(0))) {
				
				rilevazione.setMessaggio(array[0]);
				
			} else {
				
				Sensore sens = DBUtils.findSensore(conn, array[0]);
				
				int sensId = Integer.parseInt(array[0]);
				
				rilevazione.setSensID(sensId);
				rilevazione.setMarca(sens.getMarca());
				rilevazione.setModello(sens.getModello());
			}
			
			//Controllo la seconda stringa
			if(Character.isLowerCase(array[1].charAt(0))) {
				
				rilevazione.setDescrizione(array[1]);
				
			} else if(Character.isUpperCase(array[1].charAt(0))) {
				
				rilevazione.setMessaggio(array[1]); 
				
			} else {
				
				Sensore sens = DBUtils.findSensore(conn, array[1]);
				
				int sensId = Integer.parseInt(array[1]);
				
				rilevazione.setSensID(sensId);
				rilevazione.setMarca(sens.getMarca());
				rilevazione.setModello(sens.getModello());
			}
			
			//Controllo la terza stringa
			if(Character.isLowerCase(array[2].charAt(0))) {
				
				rilevazione.setDescrizione(array[2]);
				
			} else if(Character.isUpperCase(array[2].charAt(0))) {
				
				rilevazione.setMessaggio(array[2]);
				
			} else {
				
				Sensore sens = DBUtils.findSensore(conn, array[2]);
				
				int sensId = Integer.parseInt(array[2]);
				
				rilevazione.setSensID(sensId);
				rilevazione.setMarca(sens.getMarca());
				rilevazione.setModello(sens.getModello());
			}
			
			//Trasformo la quarta stringa
			Date parsed = null;
			
			try {
				
				parsed = formatter.parse(array[3]);
				
			} catch (ParseException e1) {

				e1.printStackTrace();
			}
			
			Timestamp data = new java.sql.Timestamp(parsed.getTime());
			
			rilevazione.setData(data);
			
			DBUtils.insertRelev(conn, rilevazione);
		}
		
		inputStream.close();
	}
}
